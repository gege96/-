/*
归并排序

原理：
分治的策略
分治 -->合并

复杂度：
时间复杂度 O(nlogn), 空间复杂度O(n) （申请n个空间）
排序时间与输入无关，最佳情况，最坏情况都是如此。

稳定性：
因为归并排序是两两比较，不存在跳跃，所以是稳定的。


/*
递归版
*/ 
#include"stdio.h" 

const int SIZE = 100;
void mergeSort(int arr[],int start,int end){
    if(start==end)return;

    //分治
    int mid = (start+end)/2;
    //递归 
    mergeSort(arr,start,mid);
    mergeSort(arr,mid+1,end);
    
    //合并
    int tempArr[SIZE];
    int start1=start,start2=mid+1;
    for(int i=start;i<=end;i++){
        if(start1>mid)
            tempArr[i]=arr[start2++];
        else if(start2>end)
            tempArr[i]=arr[start1++];
        else if(arr[start1]>arr[start2])
            tempArr[i]=arr[start2++];
        else 
            tempArr[i]=arr[start1++];
    }
    for(int i=start;i<=end;i++)
        arr[i]=tempArr[i];

}
int main() {
	
     int arr[] = {2,1,9,5,3,2,1};
     
     int len = (int)sizeof(arr)/sizeof(*arr);
     mergeSort(arr,0,len-1);
     for(int i=0; i<len; i++) {
      printf("%d ",arr[i]);
     }
    
		printf("\nlength:%d", len);	 
   
	 return 0;
} 
